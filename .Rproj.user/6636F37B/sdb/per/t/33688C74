{
    "collab_server" : "",
    "contents" : "#' Easily access p-values from linear models\n#'\n#' This function gives the user easy access to p-values for specific predictors from a linear model\n#'\n#' @param pred the predictor from the linear model whose p-value is desired\n#' @param fit a linear model of type \"lm\" containing the desired predictor\n#' @return the p-value for the desired predictor from the linear model\n#' @author Cory Langille <lang1729@gmail.com>\n#' @seealso \\code{lm}\n#' @export\n#'\nextractp <- function(pred, fit) {\n  predClasses = attr(fit$terms, \"dataClasses\")        #finds the predictors that are categorical variables\n  fact = predClasses[names(predClasses) == pred]\n  if(fact == \"factor\") {\n    pvalues <- anova(fit)[,5]\n    predList <- rownames(anova(fit))\n    index <- which(predList == pred)\n    return(pvalues[index])\n  }else {\n    pvalues <- summary(fit)$coefficients[,4]\n    return(pvalues[names(pvalues)==pred])\n  }\n}\n\n\n\n#' Create formulas from strings to be used in linear models\n#'\n#' This function takes a string and a linear model and either adds the predictor to the model, or removes it.\n#'\n#' @param pred the predictor to be added or removed from the current model\n#' @param fitCurrent the current model to be updated\n#' @param add by default adds the predictor to to the model.  add=F removes the predictor from the model\n#' @return the updated model of type \"lm\"\n#' @export\n#'\nfMaker <- function(pred, fitCurrent, add=T) {\n  addNew <- as.formula(paste(\".~.+\", pred))\n  remNew <- as.formula(paste(\".~.-\", pred))\n  if(add) {\n    return(update(fitCurrent, addNew))\n  }  else {\n    return(update(fitCurrent, remNew))\n  }\n}\n\n\n\n#' Adds a single predictor to a linear model based on its p-value\n#'\n#' This function will try and add a new predictor to a current model.  A predictor will be added if it has minimum p-value among all predictors and its p-value is below a certain threshold\n#'\n#' @param fitCurrent the current model of type \"lm\"\n#' @param fullmodel a linear model containing all possible predictors.  Typically of the form lm(y~., data=data)\n#' @param aEnter the threshold for adding the predictor, set to 0.1 be default\n#' @return an updated linear model of type \"lm\"\n#' @export\n#'\nstepfwd <- function(fitCurrent, fullmodel, aEnter = 0.1) {\n  predsIncluded <- rownames(anova(fitCurrent))                                                #list of predictors in current model\n  predsFull <- rownames(anova(fullmodel))                                                     #list of predictors in full model\n  predsExcluded <- setdiff(predsFull, predsIncluded)                                          #list of predictors not in current model\n  pvals <- sapply(predsExcluded, function(x) as.numeric(extractp(x, fMaker(x, fitCurrent))))  #takes each predictor not in the current model, creates a new lm which includes it, and stores its respective p-value\n  pvals <- unlist(pvals)\n  toAdd <- pvals[which(pvals==min(pvals))]\n  if(length(toAdd)==0) return(fitCurrent)\n  if(toAdd <= aEnter) return(fMaker(names(toAdd), fitCurrent))\n  return(fitCurrent)\n}\n\n\n\n#' Removes a single predictor from a linear model based on its p-value\n#'\n#' This function will try and remove a single predictor from a current linear model.  A predictor will be removed if it has maximal p-value and its p-value is greater than a certain threshold.\n#'\n#' @param fitCurrent the current model of type \"lm\"\n#' @param fullmodel a linear model containing all possible predictors.  Typically of the form lm(y~., data=data)\n#' @param aRemove the threshold for removing the predictor, set to 0.1 by default\n#' @return an updated linear model of type \"lm\"\n#' @export\n#'\nstepbwd <- function(fitCurrent, fullmodel, aRemove = 0.1) {\n  predsIncluded <- rownames(anova(fitCurrent))\n  predsIncluded <- predsIncluded[predsIncluded != \"Residuals\"]\n  pvalues <- sapply(predsIncluded, function(x) as.numeric(extractp(x, fitCurrent)))\n  toRemove <- pvalues[which(pvalues == max(pvalues))]\n  if(toRemove > aRemove) return(fMaker(names(toRemove), fitCurrent, add=F))\n  return(fitCurrent)\n}\n\n#' Selects the best predictors for a linear model based on p-values\n#'\n#' This function will create a linear model based on the p-values for each predictor.\n#' @param response the response variable of interest in the model\n#' @param fullmodel a linear model containing all possible predictors.  Typically of the form lm(y~., data=data)\n#' @param aEnter the threshold for adding new predictors, set to 0.1 by default\n#' @param aRemove the threshold for removing predictors from the current model, set to 0.1 by default\n#' @return a linear model of type lm containing the \"best\" predictors\n#' @author Cory Langille <lang1729@gmail.com>\n#' @seealso extractp, stepfwd, stepbwd, fMaker\n#' @export\n#'\npStepwise <- function(response, fullmodel, aEnter = 0.1, aRemove = 0.1) {\n  continue <- TRUE\n  fitBwd <- lm(as.formula(paste(response, \"~1\")))           #creates an empty model to begin with\n  while(continue){\n    print(\"Trying to add another predictor\")\n    fitFwd = stepfwd(fitBwd, fullmodel)\n    print(fitFwd$call)\n    if(identical(fitFwd, fitBwd) == T) {\n      return(fitFwd)\n    }else {\n      print(\"Trying to remove a predictor\")\n      fitBwd = stepbwd(fitFwd, fullmodel)\n    }\n  }\n}\n",
    "created" : 1469217705093.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "716772084",
    "id" : "33688C74",
    "lastKnownWriteTime" : 1469468995,
    "last_content_update" : 1469468995117,
    "path" : "~/R/pStepwise/R/pStepwise.R",
    "project_path" : "R/pStepwise.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}