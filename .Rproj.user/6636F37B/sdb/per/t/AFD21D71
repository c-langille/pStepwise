{
    "collab_server" : "",
    "contents" : "#function which takes a predictor and a model and returns the p-value \n#first try\nExtractp <- function(pred, fit) {\n  pvals <- anova(fit)[, 5]\n  pred.list <- rownames(anova(fit))\n  index <- which(pred.list == pred)\n  return(pvals[index])\n}\n\n#second try\nextractP <- function(pred, fit) {\n  predClasses = attr(fit$terms, \"dataClasses\")\n  if(is.factor(pred)) {\n    pvals <- anova(fit)[,5]\n    pred.list <- rownames(anova(fit))\n    index <- which(pred.list == pred)\n    return(pvals[index])\n  }\n  pvals <- summary(fit)$coefficients[,4]\n  return(pvals[names(pvals)==pred])\n}\n\nextractp <- function(pred, fit) {\n  predClasses = attr(fit$terms, \"dataClasses\")\n  fact = predClasses[names(predClasses) == pred]\n  if(fact == \"factor\") {\n    pvals <- anova(fit)[,5]\n    pred.list <- rownames(anova(fit))\n    index <- which(pred.list == pred)\n    return(pvals[index])\n }else {\n   pvals <- summary(fit)$coefficients[,4]\n  return(pvals[names(pvals)==pred])\n }\n}\n\n\npsubsets <- function(resp, fullmodel, a.enter = 0.1, a.remove = 0.1) {\n  continue <- TRUE\n  mod.bwd <- lm(as.formula(paste(resp, \"~1\")))\n  while(continue){\n    print(\"Trying to add another predictor\")\n    mod.fwd = stepfwd(mod.bwd, fullmodel)\n    print(mod.fwd$call)\n    if(identical(mod.fwd, mod.bwd) == T) {\n      return(summary(mod.fwd))\n   }else {\n     print(\"Trying to remove a predictor\")\n      mod.bwd = stepbwd(mod.fwd, fullmodel)\n    }\n  }\n}\n\n#function which take a bunch of things and formats them into a nice formula to use in lm's\nfMaker <- function(pred, mod.in, add=T) {\n  add.new <- as.formula(paste(\".~.+\", pred))\n  rem.new <- as.formula(paste(\".~.-\", pred))\n  if(add) {\n    return(update(mod.in, add.new))\n  }  else {\n    return(update(mod.in, rem.new))\n  }\n}\n\nstepfwd <- function(mod.in, fullmodel, a.enter = 0.1) {\n  pred.inc <- rownames(anova(mod.in))\n  pred.ex <- rownames(anova(fullmodel))\n  pred.ex <- setdiff(pred.ex, pred.inc)\n  pvals <- sapply(pred.ex, function(x) as.numeric(extractp(x, fMaker(x, mod.in))))\n  pvals <- unlist(pvals)\n  to.add <- pvals[which(pvals==min(pvals))]\n  if(length(to.add)==0) return(mod.in)\n  if(to.add <= a.enter) return(fMaker(names(to.add), mod.in))\n  return(mod.in)  \n}\n\nstepbwd <- function(mod.in, fullmodel, a.remove = 0.1) {\n  pred.inc <- rownames(anova(mod.in))\n  pred.inc <- pred.inc[pred.inc != \"Residuals\"]\n  pvals <- sapply(pred.inc, function(x) as.numeric(extractp(x, mod.in)))\n  to.remove <- pvals[which(pvals == max(pvals))]\n  if(to.remove > a.remove) return(fMaker(names(to.remove), mod.in, add=F))\n  return(mod.in)\n}\n\nstepBAD <- function(mod.in, fullmodel, a.remove = 0.1) {\n  pred.inc <- rownames(anova(mod.in))\n  pred.inc <- pred.inc[pred.inc != \"Residuals\"]\n  if(length(pred.inc) <= 1) return(mod.in)\n  max.p <- a.remove\n  for(i in pred.inc){\n    mod.new <- fMaker(i, mod.in, add=F)\n    for(j in pred.inc & j != i) {\n      if(extractp(j, mod.new) > max.p){\n        max.p <- extractp(j, mod.new)\n        mod.out <- fMaker(j, mod.in, add=F)\n      }  \n    }\n  }\n}\n  ",
    "created" : 1469217690791.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4065498952",
    "id" : "AFD21D71",
    "lastKnownWriteTime" : 1469216700,
    "last_content_update" : 1469216700,
    "path" : "~/R/psubset/cleaner.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}